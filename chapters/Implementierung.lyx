#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 503
\begin_document
\begin_header
\origin unavailable
\textclass scrartcl
\begin_preamble
\usepackage{minted}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding utf8
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation 0bp
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Implementierung und Messung
\end_layout

\begin_layout Subsection
Das Maß
\end_layout

\begin_layout Standard
Ziel der Arbeit ist die Implementierung eines generischen Gossiping-Frameworks,
 das auf den Knoten des IoT-Labs ausgeführt werden kann, und die Evaluierung
 dieses Frameworks durch eine Anwendung, mit der die Nachrichtenverteilzeit
 durch den Gossiping-Algorithmus bestimmt werden kann.
\end_layout

\begin_layout Standard
Die Nachrichtenverteilzeit sei die Zeit, die eine Information benötigt,
 um von einem Knoten 
\begin_inset Formula $s\in V$
\end_inset

 an alle weiteren Knoten in 
\begin_inset Formula $V\setminus\left\{ s\right\} $
\end_inset

 verteilt zu werden.
\end_layout

\begin_layout Standard
Wie auch in 
\begin_inset CommandInset citation
LatexCommand cite
key "6042051"

\end_inset

 angemerkt, wird die Nachrichtenverteilzeit maßgeblich durch die Gossiping-Perio
de 
\begin_inset Formula $\Delta t$
\end_inset

 bestimmt und ist nicht direkt von der Latenz der Kommunikation abhängig.
\end_layout

\begin_layout Standard
Dies folgt schon aus Anforderung 5, die in Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Anforderungen-Gossiping"

\end_inset

 an einen Gossiping-Algorithmus gestellt wurde.
\end_layout

\begin_layout Standard
Es wurde dort definiert, dass die Periode 
\begin_inset Formula $\Delta t$
\end_inset

 größer sein muss als die Zeit, die der Nachrichtenaustausch der Knoten
 benötigt, um eine Überlagerung der Runden zu verhindern.
\end_layout

\begin_layout Standard
Um also die Nachrichtenverteilzeit bestimmen zu können, muss ermittelt werden,
 wie viele Gossiping-Runden durchgeführt werden müssen bis alle Knoten die
 Nachricht erhalten.
\end_layout

\begin_layout Standard
Für einen Push-Pull-Algorithmus kann daher nach Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Push-Pull-PP"

\end_inset

 die folgende Nachrichtenverteilzeit 
\begin_inset Formula $T$
\end_inset

 erwartet werden:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
T & \le & \Delta t\left(\log_{3}n+O\left(\ln\ln n\right)\right)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Subsubsection
Ermittlung der Nachrichtenverteilzeit
\end_layout

\begin_layout Standard
Die Ermittlung der Nachrichtenverteilzeit lässt sich also darauf reduzieren,
 die Anzahl der Runden zu ermitteln, die der Gossiping-Algorithmus benötigt,
 um die Nachricht im gesamten Netzwerk zu verteilen.
\end_layout

\begin_layout Standard
Die einzige Möglichkeit, mit einem einzelnen Knoten von außen zu interagieren
 und Daten zu aggregieren, ist eine serielle Schnittstelle, die über den
 Host-Knoten auf einen TCP-Port geleitet wird (siehe Abbildung 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Schnittstellen-IoT"

\end_inset

).
 Dieser TCP-Port kann dann über das SSH-Frontend abgerufen werden.
\end_layout

\begin_layout Standard
Algorithmus 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Pseudocode-Rundenanzahl"

\end_inset

 zeigt den Algorithmus, der auf der Seite des SSH-Frontends ermittelt, wie
 viele Runden vergangen sind.
\end_layout

\begin_layout Standard
Dabei wird davon ausgegangen, dass ein Knoten, sobald er infiziert wurde,
 eine entsprechende Nachricht über die serielle Schnittstelle ausgibt, die
 die derzeitige Rundennummer enthält.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Enumerate
erstelle eine Menge 
\begin_inset Formula $S$
\end_inset

 aller Knoten
\end_layout

\begin_layout Enumerate
Solange 
\begin_inset Formula $S$
\end_inset

 nicht leer ist:
\end_layout

\begin_deeper
\begin_layout Enumerate
Warte auf Nachrichten von allen seriellen Schnittstellen der Knoten
\end_layout

\begin_layout Enumerate
Wenn eine Nachricht von Knoten 
\begin_inset Formula $k$
\end_inset

 empfangen wurde und diese Nachricht über die Aktualisierung des Caches
 ist:
\end_layout

\begin_deeper
\begin_layout Enumerate
entferne 
\begin_inset Formula $k$
\end_inset

 aus 
\begin_inset Formula $S$
\end_inset


\end_layout

\begin_layout Enumerate
merke dir die übermittelte Rundennummer, solange sie größer ist als die
 größte bisher bekannte.
\end_layout

\end_deeper
\end_deeper
\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Pseudocode-Rundenanzahl"

\end_inset

Pseudocode zur Ermittlung der Rundenanzahl
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dieser Algorithmus geht davon aus, dass eine solche Nachricht nur ausgegeben
 wird, wenn der Knoten die vollständige Information erhalten hat.
 Des Weiteren geht dieses Verfahren nicht auf den Inhalt des Caches ein.
 Sollten also zu Beginn mehrere Knoten mit unterschiedlichen Werten infiziert
 sein, ist dieser Algorithmus dafür nicht nutzbar.
\end_layout

\begin_layout Standard
Im Rahmen dieser Arbeit wurde deshalb davon ausgegangen, dass nur ein Knoten
 zu Beginn infiziert ist, weshalb eine Betrachtung des Cache-Inhalts entfallen
 kann.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:neighbourhood-relationship"

\end_inset

Konstruktion der Nachbarschaftsrelation
\end_layout

\begin_layout Standard
Wird ein Knoten gestartet, so weiß er nicht, welche Knoten sich in direkter
 Nachbarschaft zu ihm befinden.
 Dies liegt erstmal in der Natur der Sache, da es sich dabei um drahtlose
 Sensorknoten handelt, die also keine direkte Verbindung zu anderen Knoten
 haben.
\end_layout

\begin_layout Standard
Wie aber in den vorherigen Abschnitten schon dargestellt ist die Nachbarschaftsr
elation aber ein wichtiges Konzept des Gossiping.
 Also ist es zur Implementierung dessen notwendig, diese Relation für jeden
 Knoten zu bestimmen.
\end_layout

\begin_layout Standard
Im ersten Schritt muss also ein Knoten auf sich aufmerksam machen, also
 den Knoten in seiner Umgebung von seiner Existenz berichten.
\end_layout

\begin_layout Standard
Der verwendete 802.15.4 Funkstandard erlaubt entweder den Versand einer Nachricht
 an einen einzelnen Knoten oder aber einer Broadcast-Nachricht, die von
 jedem Knoten, der diese decodieren kann, empfangen wird.
\end_layout

\begin_layout Standard
Da der Knoten ja noch keine weiteren Knoten kennt, ist eine Broadcast-Nachricht
 die einzige Möglichkeit, die ihm bleibt, um sich anderen Knoten vorzustellen.
\end_layout

\begin_layout Standard
Eine wünschenswerte Anforderung bei der Konstruktion dieser Nachbarschaftsrelati
on ist auch eine physische Nachbarschaft der Knoten.
\end_layout

\begin_layout Standard
Das heißt, ein Knoten sollte nur die Knoten in seiner näheren Umgebung als
 Nachbarn kennen, mit denen er auch sicher kommunizieren kann.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/davidbohn/Bachelor-Thesis/images/Connected_Regions.jpg
	width 50col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Knoten B ist in Connected Region von A, aber nicht umgekehrt (eigene Abbildung)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Jedoch ist eine solche Anforderung nicht einfach umzusetzen.
 Wie 
\noun on
Baccour
\noun default
 et al.
 in 
\begin_inset CommandInset citation
LatexCommand cite
key "Baccour:2012:RLQ:2240116.2240123"

\end_inset

 feststellen, ist der Übertragungsbereich eines drahtlosen Sensorknotens,
 in dem Pakete zuverlässig übertragen werden können, nicht isotrop, das
 heißt nicht als einfache zirkulare Form um den Knoten annehmbar, sondern
 lässt sich in drei Bereiche aufteilen: Die 
\begin_inset Quotes gld
\end_inset


\emph on
connected region
\emph default

\begin_inset Quotes grd
\end_inset

 erfüllt die Anforderungen einer qualitativ hochwertigen und stabilen Funkverbin
dung mit anderen Knoten.
 In der 
\begin_inset Quotes gld
\end_inset


\emph on
transitional region
\emph default

\begin_inset Quotes grd
\end_inset

 sind die Kanäle zwischen Knoten auf lange Sicht nicht unbedingt stabil
 und die 
\begin_inset Quotes gld
\end_inset


\emph on
disconnected region
\emph default

\begin_inset Quotes grd
\end_inset

 ist für die Datenübertragung ungeeignet, da eine zuverlässige Datenübertragung
 nicht oder kaum möglich ist.
\end_layout

\begin_layout Standard
Die 
\begin_inset Quotes gld
\end_inset


\emph on
transitional region
\emph default

\begin_inset Quotes grd
\end_inset

 ist dabei von großer Problematik, da deren Dimension nicht unbedingt im
 Zusammenhang mit der Distanz zum Sender steht und dazu noch asymmetrisch
 ist.
 Nach 
\begin_inset CommandInset citation
LatexCommand cite
key "Baccour:2012:RLQ:2240116.2240123"

\end_inset

 weisen Kanäle in diesem Bereich einen stark schwankenden Anteil des erfolgreich
en Paketempfangs zwischen 10% und 90% auf, welcher als 
\emph on
Packet Reception Ratio
\emph default
 bezeichnet wird und als Verhältnis zwischen der Anzahl der erfolgreich
 empfangenen Pakete zu der Anzahl der versendeten Pakete definiert ist.
\end_layout

\begin_layout Standard
Wenn also ein Knoten eine Broadcast-Nachricht erhält, macht es durchaus
 Sinn, nicht blind den Absender als Nachbarn hinzuzufügen, sondern noch
 weitere Metriken einfließen zu lassen.
 Die Implementierung des Funktreibers des IoT-Lab Moduls ermöglicht die
 Nutzung zweir Werte zur Entscheidungsfindung:
\end_layout

\begin_layout Description
RSSI
\begin_inset space \space{}
\end_inset

(Remote
\begin_inset space \space{}
\end_inset

Signal
\begin_inset space \space{}
\end_inset

Strength
\begin_inset space \space{}
\end_inset

Indicator) Der RSSI-Wert gibt den Leistungspegel in dBm (Dezibel Milliwatt)
 an, mit dem ein Signal empfangen wurde und kann dabei sowohl negative als
 auch positive Werte annehmen.
\end_layout

\begin_layout Description
LQI
\begin_inset space \space{}
\end_inset

(Link
\begin_inset space \space{}
\end_inset

Quality
\begin_inset space \space{}
\end_inset

Indicator) Der Link Quality Indicator ist bereits in Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:PHY-Layer"

\end_inset

 vorgestellt worden.
 Die konkrete Implementierung ist aber dem Chip-Hersteller überlassen, so
 lange der Wertebereich zwischen 
\begin_inset Formula $0x00$
\end_inset

 und 
\begin_inset Formula $0xff$
\end_inset

 liegt.
 Der verwendete Chipsatz AT86RF231 definiert den LQI so, dass er sich nach
 längerer Laufzeit auf die 
\begin_inset Quotes gld
\end_inset


\emph on
packet error rate
\emph default

\begin_inset Quotes grd
\end_inset

 (PER) abbilden lässt, welche das Verhältnis zwischen fehlerhaften empfangenen
 Paketen zur gesamten Anzahl an empfangenen Paketen darstellt (vgl.
 
\begin_inset CommandInset citation
LatexCommand cite
key "AT86RF231"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/davidbohn/Bachelor-Thesis/images/PER-vs-LQI-cut.pdf
	width 75col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Korrelation zwischen LQI und PER des AT86RF231-Chipsatzes nach vielen Transaktio
nen (Abbildung 8.6 in 
\begin_inset CommandInset citation
LatexCommand cite
key "AT86RF231"

\end_inset

)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Implementierung lässt sich leicht auf eine der beiden Metriken umstellen,
 standardmäßig ist aber eine Abgrenzung nach der RSSI implementiert.
\end_layout

\begin_layout Standard
Nun könnten allen Knoten diese Nachricht ja gleichzeitig versenden wollen,
 was dazu führt, dass die meisten dieser Broadcast-Nachrichten verloren
 gehen, da hier nicht sichergestellt wird, dass die Pakete auch wirklich
 empfangen werden und die Knoten so natürlich in sehr kurzer Zeit eine sehr
 große Last abzuarbeiten haben und so unter Umständen nicht einmal empfangsberei
t für alle Pakete sind.
\end_layout

\begin_layout Standard
Da dieser Schritt nicht Gegenstand der Messungen ist, sieht die Implementierung
 hierbei als Lösung vor, dass der Knoten von außen dazu aufgefordert wird,
 nach seinen Nachbarn zu suchen.
 Somit können alle Knoten einzeln die Suche starten und die Überlagerung
 von Nachrichten oder der Verlust sollte kein Problem darstellen.
\end_layout

\begin_layout Standard
Ein weiteres Problem ist die Kalibrierung der Schwellwerte und der Sendestärke.
 Durch sich ständig ändernde Knotenkonstellationen fiel es sehr schwer geeignete
 Parameter zu wählen, die nicht zu dichten Graphen führten.
 Außerdem sind die Knoten in der Regel sehr nahe beieinander, so dass sie
 sich in der Regel immer sehen.
\end_layout

\begin_layout Standard
In den Experimenten ergab sich dabei meistens entweder ein sehr dichter
 Graph oder ein sehr lichter Graph mit mehreren Zusammenhangskomponenten.
\end_layout

\begin_layout Standard
Eine bessere Wahl der Parameter oder eine stärkere Limitierung der möglichen
 Nachbarn könnte hier Gegenstand weiterer Versuche sein.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/davidbohn/Bachelor-Thesis/images/neighbourhood-13-01-2016-22-39.pdf
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Netzwerk von 10 Knoten mit unidirektionalen Links (rot markiert) und hoher
 Dichte (Ausgabe des Programms)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Implementierung des Gossiping-Frameworks
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Generisches-Framework"

\end_inset

Generisches Framework
\end_layout

\begin_layout Standard
Diese Arbeit umfasst die Implementierung eines generischen Gossiping-Frameworks,
 das sich an dem in 
\begin_inset CommandInset citation
LatexCommand cite
key "6042051,5290827"

\end_inset

 vorgestellten theoretischen Framework orientiert, das bereits in Algorithmus
 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Gossiping-Framework-nach-Bakhshi"

\end_inset

 als Pseudocode beschrieben wurde.
\end_layout

\begin_layout Standard
Am Ende soll also ein Framework implementiert werden, dass lediglich drei
 Methoden bereitstellt, die implementiert werden müssen, um einen konkreten
 Algorithmus zu implementieren, der das Gossiping-Protokoll verwendet: eine
 Methode zur Auswahl des Nachbarn (
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

RandomPeer()
\end_layout

\end_inset

), mit dem in der aktuellen Runde kommuniziert werden soll, eine Methode
 zur Vorbereitung der Nachricht (
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

PrepareMsg()
\end_layout

\end_inset

) sowie eine Methode, die anhand des eigenen Caches und einer empfangenen
 Nachricht entsprechende Änderungen am eigenen Cache vornimmt (
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Update()
\end_layout

\end_inset

).
 
\end_layout

\begin_layout Standard
Es ist jedoch nicht möglich, das Framework eins zu eins für einen IoT-Lab-Knoten
 zu implementieren.
\end_layout

\begin_layout Standard
Das Hauptproblem ist hierbei, dass das 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

receive
\end_layout

\end_inset

-Konstrukt, das vom Knoten-Betriebssystem bereitgestellt wird, sich deutlich
 anders verhält als in Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Methoden-zur-Kommunikation"

\end_inset

 definiert wurde.
\end_layout

\begin_layout Standard
Durch einen Interrupt wird von dem Funkchip angezeigt, dass eine neue Nachricht
 vorliegt.
 Das führt dazu, dass eine Callback-Funktion aufgerufen wird, die die entspreche
nde Nachricht enthält und zur Verarbeitung dieser dient.
\end_layout

\begin_layout Standard
Es ist daher nicht praktikabel, eine Trennung in zwei Threads vorzunehmen,
 da die Behandlung der empfangenen Nachrichten losgelöst von diesen geschieht.
\end_layout

\begin_layout Standard
Das impliziert des Weiteren das Problem, ob eine Nachricht jetzt eine Pull-Nachr
icht ist, das heißt als Antwort an den aktiven Thread gerichtet ist, oder
 eine Push-Nachricht.
 Deswegen wurde eine Struktur für die Nachricht implementiert, die ein entsprech
endes Typenfeld enthält, nach dem entschieden werden kann, ob es sich bei
 der Nachricht um eine Push- oder Pull-Nachricht handelt.
\end_layout

\begin_layout Standard
In den Tests trat das Problem auf, dass es bei größeren Knotenmengen vermehrt
 zu Sendefehlern kam.
 Nach einigen Tests konnte festgestellt werden, dass die Ursache dafür in
 der gleichzeitigen Ausführung des Gossips Timing-Probleme beim Empfang
 und Senden von Paketen auftraten.
 Die Lösung dieses Problems lag darin, die aktiven Threads mit einem minimalen
 zufälligen Versatz zu starten, der immer deutlich kleiner ist als die Gossiping
-Frequenz.
 Dadurch wird diese Frequenz von den Knoten trotzdem eingehalten, aber die
 Knoten versuchen nicht mehr gleichzeitig zu senden, was zu fehlschlagenden
 
\emph on
clear channel assessments
\emph default
 führte.
\end_layout

\begin_layout Standard
Des Weiteren wurde versucht eine möglichst generische Cache-Implementierung
 anzufertigen, die für möglichst beliebige Algorithmen genutzt werden kann.
\end_layout

\begin_layout Standard
Die einzige Einschränkung ist dabei, dass in einer Runde nur ein Paket geschickt
 werden kann.
 Ein Paket ist maximal 
\begin_inset Formula $16$
\end_inset

 Bytes groß.
 Von diesen sind aber 
\begin_inset Formula $4$
\end_inset

 Bytes für die CSMA-Schicht reserviert, weshalb für die eigenen Anwendungen
 lediglich 
\begin_inset Formula $12$
\end_inset

 Bytes verbleiben.
 Davon werden aber von der Implementierung noch 2 Bytes für die aktuelle
 Runde verwendet (zur Sortierung für das Frontend), ein Byte für den oben
 erwähnten Typ.
 Dann existiert noch eine Struktur, die ein Cache-Segment identifiziert,
 die also sagt, welchen Teil des internen Caches man überträgt.
 Diese Struktur belegt zwei weitere Bytes, so dass mittlerweile nur noch
 7 Bytes verbleiben.
 Deshalb wurde die Implementierung auf 4-Byte große Daten beschränkt, was
 einem 32 Bit Wort entspricht.
\end_layout

\begin_layout Standard
Die limitierte Paketgröße ist in diesem Fall eines der größten Probleme
 des Systems.
 Jedoch ist das Funkprotokoll auch genau für Anwendungen konzipiert worden,
 die die Übertragung von geringen Dateimengen vorsehen, und einfache Sensorwerte
 lassen sich auch so gut übertragen.
\end_layout

\begin_layout Subsubsection
Implementierung des Testalgorithmus
\end_layout

\begin_layout Standard
Zum Test wurde ein Algorithmus implementiert, der das Maximum einer positiven
 Ganzzahl im Netzwerk verteilt und analysiert.
 Somit lässt sich ein sehr einfaches Kriterium festlegen, wann der Algorithmus
 für unsere Zwecke terminiert: sobald alle Knoten dieses Maximum erhalten
 haben.
\end_layout

\begin_layout Standard
Wenn zu Beginn des Gossipings nur ein Knoten mit einem Wert infiziert wird,
 so wird auch nur dieser Wert im Netzwerk verteilt.
 Des Weiteren gibt jeder Knoten eine Nachricht, dass er seinen Cache aktualisier
t hat, über die serielle Schnittstelle aus.
 Somit muss nur gezählt werden wie oft von verschiedenen Knoten entsprechende
 Nachrichten kommen, bis von jedem Knoten eine ankommt.
\end_layout

\begin_layout Standard
Die serielle Schnittstelle wird dabei als fehler- und vor allem verlustfrei
 angenommen.
\end_layout

\begin_layout Subsection
Steuerungssoftware
\end_layout

\begin_layout Standard
Zur Steuerung wurde zunächst eine Java-GUI entwickelt, welche die aktuelle
 Topologie darstellen sollte und darüber ein Feedback über den Zustand des
 Algorithmus geben sollte durch Visualisierung des Nachrichtenverkehrs.
\end_layout

\begin_layout Standard
Da aber das Rendering des Topologie-Plots von größeren Knotenmengen sämtliche
 kostenfrei verfügbaren Bibliotheken zum Absturz brachten, wurde die Entwicklung
 dieser Software eingestellt und stattdessen ein Python-Skript als Frontend
 entwickelt.
\end_layout

\begin_layout Standard
Dieses Tool führt folgende Schritte aus:
\end_layout

\begin_layout Enumerate
Abfrage aller Knoten, die an dem Experiment teilnehmen
\end_layout

\begin_layout Enumerate
Aufforderung jedes Prozesses, seine Topologie zu bilden
\end_layout

\begin_layout Enumerate
Generierung eines Topologie-Graphen
\end_layout

\begin_layout Enumerate
Aktivierung des Gossipings auf allen Knoten
\end_layout

\begin_layout Enumerate
Infizierung eines zufällig ausgewählten Knotens mit einem Wert
\end_layout

\begin_layout Enumerate
Lesen aller NEW-CACHE-Nachrichten, d.h.
 Knoten mit neuem Cache, und Registrierung dieser Knoten
\end_layout

\begin_layout Enumerate
Log-Datei schreiben, wenn alle Knoten die Nachricht empfangen haben oder
 der Nutzer das Programm abbricht
\end_layout

\begin_layout Subsection
Stolpersteine
\end_layout

\begin_layout Standard
Bei der Implementierung traten einige Probleme auf, die in diesem Abschnitt
 kurz beschrieben werden sollen.
\end_layout

\begin_layout Standard
Zunächst handelt es sich beim Gossiping-Algorithmus um einen nichtdeterministisc
hen Algorithmus, dessen Verhalten zu großem Teil von Zufallsentscheidungen
 bestimmt wird.
 Tritt also ein Fehler auf, so ist dieser nicht sofort reproduzierbar.
 Dies ist prinzipbedingt ein Problem der meisten verteilten Algorithmen,
 jedoch tragen die Debugging-Tools, die das IoT-Lab hierfür bereitstellte,
 dem nicht Rechnung.
\end_layout

\begin_layout Standard
Es ist zwar möglich, für einen einzelnen Knoten über ein GNU Debugger Interface
 Debugging durchzuführen, jedoch muss man dazu schon bevor der Fehler auftritt
 dieses Interface genau für diesen Knoten starten.
 Da die meisten Fehler jedoch zufällig auftraten, war dies nicht machbar.
\end_layout

\begin_layout Standard
Weitere Probleme traten dann auf, wenn die Belastung des Funkmediums stark
 war.
 So war initial geplant, den Aufbau der Nachbarschaftsrelation für alle
 Knoten gleichzeitig zu starten.
 Dies führte dazu, dass alle Knoten gleichzeitig Broadcast-Nachrichten losschick
ten.
 Dies führte dazu, dass so gut wie kein Knoten eine Broadcast-Nachricht
 des anderen empfangen hat, da sie in dieser Zeit nicht empfangsbereit waren
 und z.B.
 durch den CSMA-CA-Algorithmus derzeit im Backoff waren.
\end_layout

\begin_layout Standard
Ein ähnliches Problem trat bei der Aktivierung des aktiven Threads im Gossiping-
Algorithmus auf, also dem periodischen Start einer Gossiping-Runde, wie
 bereits in Abschnitt 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Generisches-Framework"

\end_inset

 beschrieben wurde.
\end_layout

\begin_layout Standard
Schließlich wurde das Testen der entwickelten Anwendung durch häufige Störungen
 im IoT-Lab deutlich erschwert.
 Zusätzlich sind die Hardware-Treiber kaum dokumentiert, da lediglich einige
 Beispiele existieren, aus denen zusammen mit dem Quellcode die Schnittstellen
 erschlossen werden mussten.
\end_layout

\begin_layout Subsection
Evaluierung
\end_layout

\begin_layout Standard
Mit der fertigen Software wurden zunächst einige Tests durchgeführt, die
 die Funktionsweise überprüfen sollten.
\end_layout

\begin_layout Standard
Wie bereits angemerkt wurde, ist die Verteilzeit einer Nachricht proportional
 zu der Anzahl der Runden und wird von der Frequenz, in der das Gossiping
 durchgeführt wird, bestimmt.
\end_layout

\begin_layout Standard
Es wurde daher zunächst versucht, die Gossiping-Frequenz so weit es geht
 zu minimieren.
\end_layout

\begin_layout Standard
Während der Entwicklung wurde zunächst ein Wert von 
\begin_inset Formula $5$
\end_inset

 Sekunden als Periodendauer 
\begin_inset Formula $\Delta t$
\end_inset

 verwendet.
\end_layout

\begin_layout Standard
Dies hatte zwei Gründe: Einerseits konnten dadurch die Ausgaben der Knoten
 nachvollzogen werden und man konnte sich ziemlich sicher sein, dass keine
 Nachrichten aus der vorherigen Runde noch in dieser Runde gesendet werden.
\end_layout

\begin_layout Standard
Zuerst wurde ein drastischer Ansatz versucht und 
\begin_inset Formula $\Delta t$
\end_inset

 auf 
\begin_inset Formula $500\,\text{ms}$
\end_inset

 gesenkt.
 Dies führte nicht zu akzeptablen Ergebnissen.
 Es kam sehr viel häufiger zu Nachrichtenverlust bzw.
 zur Verzögerung des Sendevorgangs, wodurch sogar schon Überlagerungen der
 Runden entstanden.
\end_layout

\begin_layout Standard
Dies liegt daran, dass ein fehlgeschlagener Sendeversuch zum Anhängen dessen
 an die Event-Warteschlange von FreeRTOS führte.
 Geschah dies mehrmals und trafen in derselben Zeit mehrere Nachrichten
 ein, konnte das Zeitfenster verlassen werden.
\end_layout

\begin_layout Standard
Des Weiteren führte diese Frequenz dazu, dass sehr schnell Fehler vom Funktreibe
r erzeugt wurden, die zwar über die serielle Schnittstelle ausgegeben wurden,
 aber zur vollständigen Deaktivierung des Knotens führten und nicht behoben
 werden konnten.
\end_layout

\begin_layout Standard
Es wurde daher ein deutlich längeres Intervall von 
\begin_inset Formula $2$
\end_inset

 Sekunden gewählt.
\end_layout

\begin_layout Standard
Dieses Intervall stellt den besten Kompromiss zwischen Verbreitungsgeschwindigke
it und Übertragungssicherheit dar.
\end_layout

\begin_layout Standard
Es sei hier angemerkt, dass in vielen Anwendungsfällen von Gossiping-Algorithmen
 die Minimierung dieser Periodendauer nicht unbedingt von Interesse ist.
 Verwendet man Gossiping zum Beispiel wie von 
\noun on
Demers
\noun default
 et al.
 in 
\begin_inset CommandInset citation
LatexCommand cite
key "Demers:1987:EAR:41840.41841"

\end_inset

 ursprünglich vorgeschlagen zur Replikation von Datenbanken so ist wahrscheinlic
h eine deutlich geringere Frequenz (also längere Periodendauer) wünschenswert.
\end_layout

\begin_layout Standard
Eine interessante Beobachtung konnte zu den unidirektionalen Kanälen gemacht
 werden.
\end_layout

\begin_layout Standard
Diese entstehen, wenn die 
\begin_inset Quotes gld
\end_inset


\emph on
connected regions
\emph default

\begin_inset Quotes grd
\end_inset

 nicht beide Knoten überdecken.
 Die vorliegende Implementierung wird aber in ihrer Funktion dadurch zunächst
 nicht eingeschränkt.
\end_layout

\begin_layout Standard
Ist das Netzwerk dicht, so wird die Infektion über andere Links vorgenommen.
 Bei einem lichten Netzwerk kann trotzdem ein Push der einen Seite angestoßen
 werden.
 Ist diese nicht infiziert, dann gibt es trotzdem eine Chance, dass die
 Pull-Antwort des Adressaten trotzdem ankommt, da in der 
\begin_inset Quotes gld
\end_inset


\emph on
transitional region
\emph default

\begin_inset Quotes grd
\end_inset

 die Pakete dennoch ankommen können und ein Knoten bei eingehender Nachricht
 nicht überprüft, ob er den Absender wirklich kennt, solange die Nachricht
 an ihn adressiert ist.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Itemize
unidirektionale Links schaden dem Programm in dieser Form nicht
\end_layout

\end_body
\end_document
